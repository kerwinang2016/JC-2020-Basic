/** *@NApiVersion 2.x */define(    [        'N/record'    ,   'N/search'    ,   'N/query'    ,   'N/file'    ,   'N/log'    ,   'N/runtime'    ,   'N/error'    ,   'N/encode'    ,   '../Helpers/CacheHelper'    ,   '../../third_parties/underscore.js'    ],   function(        record    ,   search    ,   query    ,   file    ,   log    ,   runtime    ,   error_module    ,   encode    ,   CacheHelper    ){    var file_api = {        searchFile: function searchFile(file_name, parent_id, no_cache)        {            var file_id, cache_key, Cache;            if(!no_cache)            {                Cache = CacheHelper();                cache_key = parent_id + '-' + file_name;                file_id = Cache.get(cache_key);            }            if(file_id)            {                return file_id;            }            var file_search = query.create({type: query.Type.FILE}),            cond1 = file_search.createCondition({fieldId: 'folder', operator: query.Operator.EQUAL, values: parent_id}),            cond2 = file_search.createCondition({fieldId: 'name', operator: query.Operator.IS, values: file_name});            file_search.condition = file_search.and(cond1, cond2);            file_search.columns = [file_search.createColumn({fieldId: 'id'})];            var results = file_search.run().results || [],            result = results.length && results[0];            if(result && result.values && result.values.length) {                file_id = result.values[0];                if(Cache && cache_key)                {                    Cache.put(cache_key, file_id);                }            }            return file_id;        }    ,   searchFolder: function searchFolder(folder_name, parent_id)        {            var Cache = CacheHelper();            var cache_key = parent_id + '-' + folder_name;            var folder_id = Cache.get(cache_key);            if(folder_id)            {                return folder_id;            }            var folder_search = search.create({                type: search.Type.FOLDER            ,	filters: [                    ['parent', search.Operator.IS, parent_id]                ,   'and'                ,   ['name', search.Operator.IS, folder_name]                ]            })            .run()            .getRange({start:0, end: 1});            if(folder_search && folder_search.length)            {                folder_id = folder_search[0].id;                Cache.put(cache_key, folder_id);            }            return folder_id;        }    ,   createFolder: function createFolder(folder_name, parent_id)        {            var Cache = CacheHelper();            var folder_id = this.searchFolder(folder_name, parent_id);            if(!folder_id)            {                try                {                    var new_folder = record.create({                        type: 'folder'                    });                    new_folder.setValue({fieldId: 'name', value: folder_name});                    new_folder.setValue({fieldId: 'parent', value: parent_id});                    folder_id = new_folder.save();                }                catch(error)                {                    folder_id = this.searchFolder(folder_name, parent_id);                }                var cache_key = parent_id + '-' + folder_name;                Cache.put(cache_key, folder_id);            }            return folder_id;        }    ,   getFiles: function getFiles(paths, optional_files)		{			var files = [];			_.each(paths, function(path)			{				try				{					var file_obj = file.load({id: path});					if(file_obj)					{						files.push(							{								file: path							,	file_id: file_obj.id							,	folder_id: file_obj.folder							,	content: file_obj.getContents()							,	type: file_obj.fileType                            ,   path: file_obj.path.replace('/' + file_obj.name, '')							}						);					}				}				catch(error)				{					if(!_.contains(optional_files, path))					{						log.error({                            title: 'Error loading file'                        ,   details: error                        });						throw error;					}				}			});			return files;		}    ,	getFolder: function getFolder(folder_id, columns)		{            var folder;            columns = columns || [];            columns = columns.concat('internalId', 'name');            columns = _.uniq(columns);            if(folder_id)            {                folder = search.lookupFields({                    type: search.Type.FOLDER                ,   id: folder_id                ,   columns: columns                });            }            if(folder)            {                var result = {id: folder.internalId[0].value};                delete folder.internalId;                return _.extend(result, folder);            }			else			{				return null;			}		}    ,	createFolders: function createFolders(folders)		{			var self = this			,	parent_id = folders.folder_id			,	ctx = runtime.getCurrentScript();			if(!_.isEmpty(folders.sub_folders))			{				_.each(folders.sub_folders, function(folder, folder_name)				{					if(ctx.getRemainingUsage() > 100)					{						if(_.isUndefined(folder.folder_id))						{							folder.folder_id = self.createFolder(folder_name, parent_id);						}						folder = self.createFolders(folder);					}				});			}			return folders;		}    ,	writeFiles: function writeFiles(files)		{			_.each(files, function(file_data)			{				if(file_data.name && file_data.folder_id)				{					var newFile = file.create({                        name: file_data.name                    ,   fileType: file.Type.PLAINTEXT                    ,   contents: file_data.content                    ,   folder: file_data.folder_id                    ,   isOnline: true                    });					newFile && newFile.save();				}				else				{					throw error_module.create({                        name: 'INVALID_FILE_TO_WRITE'                    ,   message: 'Invalid file name: ' + file_data.name + ' or folder id ' + file_data.folder_id                    });				}			});		}    ,	deleteFiles: function deleteFiles(files)		{			_.each(files, function(file_id)			{				file.delete({id: file_id});			});		}    ,	moveFiles: function moveFiles(src_paths, dst_names)		{			var files_ids = this.copyFiles(src_paths, dst_names);			this.deleteFiles(files_ids);		}    ,	copyFiles: function copyFiles(src_paths, dst_names, return_dst_ids, returnFileContent)		{            returnFileContent = !return_dst_ids && returnFileContent;			if(src_paths.length !== dst_names.length) {				throw new Error('You must provide a destination name for each source');			}			var files_ids = [];			var filesContents = [];			_.each(src_paths, function(src_path, index) {				if(!dst_names[index].folder_id) {					throw new Error('You must provide a destination folder id');				}                var src_file = file.load({id: src_path});				if(src_file) {					var content = src_file.getContents();					var type = src_file.fileType;					if(type === 'MISCBINARY') {                        //If the file is empty use a space because content is required						content = content ? encode.convert({                            string: content,                            inputEncoding: encode.Encoding.BASE_64,                            outputEncoding: encode.Encoding.UTF_8                        }) : ' ';						type = file.Type.PLAINTEXT;					}					var newFile = file.create({                        name: dst_names[index].name || src_file.name,                        fileType: type,                        contents: content || ' ',                        folder: dst_names[index].folder_id,                        isOnline: true                    });                    if(type === file.Type.STYLESHEET)                    {                        newFile.encoding = file.Encoding.UTF_8;                    }					var new_id = newFile.save();					files_ids.push(!return_dst_ids ? src_file.id: new_id);					filesContents.push(content);				}			});			return returnFileContent ? filesContents : files_ids;		}    };    return file_api;});