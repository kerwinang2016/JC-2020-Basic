var Handler = (function(){

    var RESULTS_PER_SEARCH = 200,
        GOVERNANCE_THRESHOLD = 200;

    var DuplicateEmailCustomerModel = Application.getModel('DuplicateCustomerManagement.Customer'),
        BackInStockNotificationCustomer = Application.getModel('BackInStockNotificationCustomer'),
        ContactModel = Application.getModel('Contact'),
        BackInStockNotificationModel = Application.getModel('BackInStockNotification'),
        BackInStockNotificationConfigurationModel = Application.getModel('BackInStockNotification.SiteConfiguration'),
        BackInStockNotificationWebsiteModel = Application.getModel('BackInStockNotificationWebsite'),
        BackendStoreItemModel = Application.getModel('BackendStoreItem');


    /* Public */
    var main  = function(type){


        console.log('--- BEGIN ---','--- BEGIN ---');
        var lines,
            emailLines,
            isNotLastTimeLines,
            isNotLastTimeEmailLines,

            i,
            j,
            k,
            customersCounter=0,
            emailsCounter= 0,
            context = nlapiGetContext();


        //First grab our pending lead creation work
        do {
            checkGovernance();
            lines = BackInStockNotificationModel.getNotProcessedLines(0,RESULTS_PER_SEARCH);
            isNotLastTimeLines = lines.length === RESULTS_PER_SEARCH;

            for(i = 0; i < lines.length; i++)
            {
                customersCounter++;
                var line = lines[i];
                checkGovernance();
                maintainCustomers(line);
            }

        } while(isNotLastTimeLines);


        console.log('Customers Processed', customersCounter);
        lines = null;


        //Then for each website configured to send BIS, get the job done
        var websiteBackInStockSites = BackInStockNotificationConfigurationModel.list();
        for(j=0; j< websiteBackInStockSites.length; j++)
        {

            checkGovernance();

            var config = websiteBackInStockSites[j];
            var websiteRecord = BackInStockNotificationWebsiteModel.get(config.website);
            var templateFiles = BackInStockNotificationConfigurationModel.getTemplates(config);

            BackendStoreItemModel.reset(); //this is needed because items have different attributes depending on website, so cache shouldn't apply;


            do {
                emailLines = BackInStockNotificationModel.getPendingEmails(config.website, 0, RESULTS_PER_SEARCH);
                isNotLastTimeEmailLines = emailLines.length === RESULTS_PER_SEARCH;

                for(k=0; k < emailLines.length; k++)
                {
                    checkGovernance();
                    emailsCounter++;
                    var emailLine = emailLines[k],
                        item = BackendStoreItemModel.get(emailLine.item,emailLine.itemType,websiteRecord);

                    sendEmail(config, templateFiles,emailLine, websiteRecord, item);
                }

            } while(isNotLastTimeEmailLines)


        }
        console.log('Emails Sent:', emailsCounter);
        console.log('--- END ---','--- END ---');
    };


    //TODO: Review IS GUEST case when on shopflow.
    function maintainCustomers(record)
    {
        var customerId = record.customer;

        if(customerId) //CASE A: User was logged in.
        {
            // IF IT'S A RECOGNIZED CUSTOMER
            var customerData = nlapiLookupField('customer',customerId,['email','isperson']),
                mainEmail = customerData.email.trim().toLowerCase(),
                isPerson = customerData.isperson === 'T',
                newEmail = record.email.trim().toLowerCase();

            //Houston, we have a new contact;
            if(mainEmail!==newEmail && !isPerson) //CASE A.1 (Email does not match registered user's mail)
            {


                var contactData = {
                        company: record.customer,
                        firstname: record.firstname,
                        lastname: record.lastname,
                        email: record.email,
                        subsidiary: record.subsidiary,
                        language: record.language
                    };
                    //contacts = ContactModel.getByCustomer(customerId),
                var contact = ContactModel.addIfNotExists(contactData);

            }

            nlapiSubmitField(
                BackInStockNotificationModel.record,
                record.internalid,
                [
                    BackInStockNotificationModel.columns.processed.fieldName
                ],
                ['T']
            );

        } else {
            //CASE B: User wasnt recognized.

            var data = {
                    isinactive: 'F',
                    email: record.email,
                    firstname: record.firstname,
                    lastname: record.lastname,
                    subsidiary: record.subsidiary,
                    currency: record.currency,
                    weblead: 'T',
                    language:  record.language, //The TEXT of locale, is the KEY of Language. Go figure!
                    leadsource: SC.Configuration.Efficiencies.BackInStockNotification.leadsourceId
                };

            var customers = DuplicateEmailCustomerModel.getDuplicated(data,['giveaccess']);

            if(customers.length > 0)
            {
                //Associate this to the first possible customer
                nlapiSubmitField(BackInStockNotificationModel.record,
                    record.internalid,
                    [
                        BackInStockNotificationModel.columns.customer.fieldName,
                        BackInStockNotificationModel.columns.processed.fieldName
                    ],
                    [customers[0].internalid,'T']);
            }
            else {

                    //Register Lead!
                    customerId = BackInStockNotificationCustomer.mantainCustomer(data, 'lead');
                    nlapiSubmitField(BackInStockNotificationModel.record, record.internalid,
                        [BackInStockNotificationModel.columns.customer.fieldName,BackInStockNotificationModel.columns.processed.fieldName],
                        [customerId,'T']);

            }
        }
    };

    var sendEmail = function(configuration,templateResources, data, website, item)
    {

        var subject;
        var rec = {
            entity: data.customer,
            record: data.internalid,
            recordtype: BackInStockNotificationModel.record
        };
        var emailText = '';
        //Some magic to pass to the template
        var dataObjs = {
            itemAttributes: _.partial(itemKeyMapper,{language:data.language,currency:data.currency}, item),
            translate: _.partial(translate,templateResources.translations[data.language]),
            configuration: configuration,
            backinstocknotification: data,
            website: website,
            item: item
        };

        emailText = templateResources.templateFunction(dataObjs);
        subject = emailText.match(/<title>([^<]+)<\/title>/)[1];

        nlapiSendEmail(configuration.sender, data.email, subject, emailText, null, null, rec);
        BackInStockNotificationModel.markAsSent(data.internalid);
    };



    var checkGovernance = function()
    {
        var context = nlapiGetContext();
        if( context.getRemainingUsage() < GOVERNANCE_THRESHOLD )
        {
            cleanup();
            var state = nlapiYieldScript();
            if( state.status == 'FAILURE' )
            {
                nlapiLogExecution("ERROR","Failed to yield script, exiting: Reason = "+state.reason + " / Size = "+ state.size);
                throw "Failed to yield script";
            }
            else if ( state.status == 'RESUME' )
            {
                nlapiLogExecution("AUDIT", "Resuming script because of " + state.reason+".  Size = "+ state.size);
            }
            else {
                nlapiLogExecution("AUDIT", "STATE" + JSON.stringify(state)+".  Size = "+ state.size);
            }
            // state.status will never be SUCCESS because a success would imply a yield has occurred.  The equivalent response would be yield
        }
    };

    var cleanup = function()
    {
        BackendStoreItemModel.reset();
    };

    return {
        main: main
    };



}());


